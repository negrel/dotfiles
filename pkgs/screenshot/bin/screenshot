#!/usr/bin/env bash

set -euo pipefail

cmdname=screenshot

print_help() {
	cat <<EOF
$cmdname - Capture your screen or a region of it.
USAGE:
  $cmdname [OPTIONS...] [SCREENSHOT_DESTINATION]
  $cmdname --select-region

OPTIONS
  --debug                                 enable debug logs
  -s, --select-region                     select the region of the screen you want to capture
  -r, --region <x>,<y> <width>x<height>   the regions of the screen you want to capture
  -a, --all                               capture all screens
  -c, --cursor                            include cursor in screenshot
EOF
}

opts=()
output=""
focused_screen=true

while test $# -gt 0; do
	case "$1" in
		--debug)
			set -x
			shift
			;;

		-h|--help)
			print_help
			exit 0
			;;

		-s|--select-region)
			shift
			opts+=("-g" "$(slurp)")
			focused_screen=false
			;;

		-r|--region)
			shift 2
			opts+=("-g" "$2")
			focused_screen=false
			;;

		-a|--all)
			shift
			focused_screen=false
			;;

		-c|--cursor)
			shift
			opts+=("-c")
			;;

		-o|--output)
			output="$2"
			shift 2
			;;

		*)
			if [ "${1:0:1}" = "-" ]; then
				echo "error: unknown option \"$1\""
				print_help
				exit 1
			fi
			break
			;;
	esac
done

if [ "$focused_screen" = "true" ]; then
	opts+=("-o" "$(wmctl monitor focused)")
fi

# Take screenshot.
if [ -z "$output" ]; then
	grim "${opts[@]}" >(wl-copy)
else
	grim "${opts[@]}" "$output"
fi

# shellcheck disable=SC2181
if [ "$?" = "0" ]; then
	if [ -z "$output" ]; then
		notify-send -i <(wl-paste) "screenshot" "Screenshot captured successfully"
	else
		notify-send -i "$output" "screenshot" "Screenshot captured successfully"
	fi
else
	notify-send "screenshot" "Screenshot failed"
fi

